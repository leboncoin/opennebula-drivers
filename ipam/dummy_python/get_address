#!/usr/bin/env python
#-*- coding: utf-8 -*-
""" OpenNebula GET ADDRESS """

# Standard library imports
from base64 import b64decode
from datetime import datetime
from random import randint
from subprocess import check_output
from sys import argv

# Third party library imports
from ipaddress import ip_address
from xmltodict import parse

# Variables
ACTION = 'GET'
DRV_ACTION = argv[1]
REQ_ID = randint(1, 1000)
LOG_FILE = open('/var/log/one/dummy_python.log', 'a')
VERBOSE = True

###############################################################################
# This script is used to get a free IP address (or set of IPs). The IP will be
# used by OpenNebula VMs and should not be allocated to any other host in the
# network.
#
# Input Arguments:
#  $1 - Base64 encoded XML with the AR description and the address request
#  $2 - Request ID
#
# XML format
#  <IPAM_DRIVER_ACTION_DATA>
#  <AR>
#    <TYPE>IP4</TYPE>
#    <IP> First IP in the network in '.' notation
#    <MAC> First MAC in the network in ':' notation
#    <SIZE>Number of IPs in the network
#    <NETWORK_ADDRESS> Base network address
#    <NETWORK_MASK> Network mask
#    <GATEWAY> Default gateway for the network
#    <DNS> DNS servers, a space separated list of servers
#    <GUEST_MTU> Sets the MTU for the NICs in this network
#    <SEARCH_DOMAIN> for DNS client
# <ADDRESS>
#   <IP>
#   <SIZE> Number of IPs to allocate
#   <MAC> MAC is optional
#
# This scrit MUST output the leased IP range, if the "size" IPs cannot be
# assgined the sript must return -1, otherwise it must exit 0. The answer to
# OpenNebula needs to include the ADDRESS spec:
#
#  ADDRESS = [ IP = "10.0.0.2", SIZE=34 ]
#
################################################################################

def get_args():
    """ Decode args """
    xml_args = b64decode(DRV_ACTION)
    return parse(xml_args)['IPAM_DRIVER_ACTION_DATA']

def log_me(string, force=False):
    """ Format log """
    if VERBOSE or force:
        LOG_FILE.write('%s [%s]: [%s] %s\n' % (
            datetime.now().strftime("%a %b %H:%M:%S %Y"),
            REQ_ID,
            ACTION,
            string))

def onevm_match_record(name_record):
    """ Verify if record is already in OpenNebula """
    log_me('onevm_match_record : %s' % name_record)

    search = check_output([
        '/usr/bin/onevm',
        'list',
        '-l', 'IP',
        '--csv'
        ])
    return name_record in search.split('\n')

def main():
    """ Main class """
    args = get_args()
    log_me('get_args : %s' % args)

    first_net_ip = ip_address(args['AR']['IP'])
    size = int(args['AR']['SIZE'])
    log_me('first_net_ip=%s, size=%s' % (first_net_ip, size))

    # Pick a random IP Adress
    ip_candidate = str(first_net_ip + randint(0, size-1))
    log_me('[INIT] ip_candidate=%s' % ip_candidate)

    # Check if the IP match nothing
    while onevm_match_record(ip_candidate):
        ip_candidate = str(first_net_ip + randint(0, size-1))
        log_me('[RETRY] ip_candidate=%s' % ip_candidate)

    log_me('[FINAL] ip_candidate=%s' % ip_candidate)

    log_me('ADDRESS = [ IP = "%s", SIZE=1 ]' % ip_candidate, force=True)
    return 'ADDRESS = [ IP = "%s", SIZE=1 ]' % ip_candidate

print main()

log_me('Done.')
LOG_FILE.close()

exit(0)
